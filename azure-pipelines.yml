trigger:
  branches:
    include:
      - main

pr:
 branches:
   include:
      - main

stages:
- stage: BUILD
  pool:
    vmImage: 'ubuntu-latest'
  variables:
      buildConfiguration: 'Release'
      buildPlatform: 'x64'
      buildRuntime: 'linux-x64'
  jobs:
    - job: Build
      steps:
        - task: UseDotNet@2 
          displayName: "Install .NET 7.0.x"
          inputs:
            version: '7.0.x'
            packageType: sdk

        - task: NodeTool@0
          displayName: 'Install Node'
          inputs:
            versionSpec: '16.x'

        - task: Npm@1
          displayName: 'npm i'
          inputs:
            command: 'install'

        - task: DotNetCoreCLI@2
          displayName: "Build"
          inputs:
            command: 'build'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
          displayName: "Publish"
          inputs:
            command: 'publish'
            publishWebProjects: true
            arguments: '-r $(buildRuntime) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
            zipAfterPublish: true
        
        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
          displayName: 'Publish pipeline artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifact: oldsaratov-map.webapp
            publishLocation: pipeline

- stage: DEPLOY
  displayName: DEPLOY QA
  dependsOn: BUILD
  condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  jobs:
  - job: Deploy
    steps:
    - download: current
      artifact: oldsaratov-map.webapp

    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Azure App Service'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Azure'
        appType: 'webAppLinux'
        WebAppName: 'oldsaratov-map'
        packageForLinux: '$(Pipeline.Workspace)/oldsaratov-map.webapp/**/*.zip'
